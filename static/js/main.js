[
  {
    "file_path": "app/static/js/app.js",
    "content": "
// Main JavaScript functionality for CV Optimizer Pro\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    initializeApp();\n    setupFormValidation();\n    setupFileUpload();\n    setupToastSystem();\n    setupAnimations();\n});\n\n/**\n * Initialize the application\n */\nfunction initializeApp() {\n    console.log('ðŸš€ CV Optimizer Pro initialized');\n\n    // Check for session storage cleanup\n    cleanupOldSessions();\n\n    // Setup event listeners\n    setupGlobalEventListeners();\n\n    // Initialize tooltips\n    initializeTooltips();\n}\n\n/**\n * Setup global event listeners\n */\nfunction setupGlobalEventListeners() {\n    // Handle navigation\n    document.addEventListener('click', function(e) {\n        if (e.target.matches('[data-action]')) {\n            handleAction(e.target.dataset.action, e.target);\n        }\n    });\n\n    // Handle keyboard shortcuts\n    document.addEventListener('keydown', function(e) {\n        // Ctrl/Cmd + Enter to submit form\n        if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {\n            const activeForm = document.querySelector('form:focus-within');\n            if (activeForm) {\n                activeForm.dispatchEvent(new Event('submit', { cancelable: true }));\n            }\n        }\n    });\n}\n\n/**\n * Setup form validation\n */\nfunction setupFormValidation() {\n    const forms = document.querySelectorAll('form[data-validate]');\n\n    forms.forEach(form => {\n        form.addEventListener('submit', function(e) {\n            if (!validateForm(form)) {\n                e.preventDefault();\n                showToast('error', 'ProszÄ™ wypeÅ‚niÄ‡ wszystkie wymagane pola poprawnie.');\n            }\n        });\n\n        // Real-time validation\n        const inputs = form.querySelectorAll('input, textarea, select');\n        inputs.forEach(input => {\n            input.addEventListener('blur', () => validateField(input));\n            input.addEventListener('input', () => clearFieldError(input));\n        });\n    });\n}\n\n/**\n * Validate entire form\n */\nfunction validateForm(form) {\n    let isValid = true;\n    const inputs = form.querySelectorAll('input[required], textarea[required], select[required]');\n\n    inputs.forEach(input => {\n        if (!validateField(input)) {\n            isValid = false;\n        }\n    });\n\n    return isValid;\n}\n\n/**\n * Validate individual field\n */\nfunction validateField(input) {\n    const value = input.value.trim();\n    let isValid = true;\n    let errorMessage = '';\n\n    // Check if required field is empty\n    if (input.hasAttribute('required') && !value) {\n        isValid = false;\n        errorMessage = 'To pole jest wymagane.';\n    }\n\n    // Check specific field types\n    if (value && input.type) {\n        switch (input.type) {\n            case 'email':\n                if (!isValidEmail(value)) {\n                    isValid = false;\n                    errorMessage = 'NieprawidÅ‚owy format adresu email.';\n                }\n                break;\n\n            case 'file':\n                if (input.files.length > 0) {\n                    const file = input.files[0];\n                    if (!isValidFile(file, input.accept)) {\n                        isValid = false;\n                        errorMessage = 'NieprawidÅ‚owy format pliku.';\n                    }\n                }\n                break;\n        }\n    }\n\n    // Show/hide error\n    if (isValid) {\n        clearFieldError(input);\n    } else {\n        showFieldError(input, errorMessage);\n    }\n\n    return isValid;\n}\n\n/**\n * Show field error\n */\nfunction showFieldError(input, message) {\n    clearFieldError(input);\n\n    input.classList.add('is-invalid');\n\n    const errorDiv = document.createElement('div');\n    errorDiv.className = 'invalid-feedback';\n    errorDiv.textContent = message;\n\n    input.parentNode.appendChild(errorDiv);\n}\n\n/**\n * Clear field error\n */\nfunction clearFieldError(input) {\n    input.classList.remove('is-invalid');\n    const errorDiv = input.parentNode.querySelector('.invalid-feedback');\n    if (errorDiv) {\n        errorDiv.remove();\n    }\n}\n\n/**\n * Setup enhanced file upload\n */\nfunction setupFileUpload() {\n    const fileInputs = document.querySelectorAll('input[type=\"file\"]');\n\n    fileInputs.forEach(input => {\n        setupDragAndDrop(input);\n        setupFilePreview(input);\n        setupFileValidation(input);\n    });\n}\n\n/**\n * Setup drag and drop for file input\n */\nfunction setupDragAndDrop(input) {\n    const container = input.closest('.file-upload-container') || input.parentNode;\n\n    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {\n        container.addEventListener(eventName, preventDefaults, false);\n    });\n\n    ['dragenter', 'dragover'].forEach(eventName => {\n        container.addEventListener(eventName, () => {\n            container.classList.add('dragover');\n        }, false);\n    });\n\n    ['dragleave', 'drop'].forEach(eventName => {\n        container.addEventListener(eventName, () => {\n            container.classList.remove('dragover');\n        }, false);\n    });\n\n    container.addEventListener('drop', (e) => {\n        const files = e.dataTransfer.files;\n        if (files.length > 0) {\n            input.files = files;\n            input.dispatchEvent(new Event('change', { bubbles: true }));\n        }\n    }, false);\n}\n\n/**\n * Prevent default drag behaviors\n */\nfunction preventDefaults(e) {\n    e.preventDefault();\n    e.stopPropagation();\n}\n\n/**\n * Setup file preview\n */\nfunction setupFilePreview(input) {\n    input.addEventListener('change', function() {\n        const file = this.files[0];\n        if (file) {\n            showFilePreview(file, input);\n        }\n    });\n}\n\n/**\n * Show file preview\n */\nfunction showFilePreview(file, input) {\n    const previewContainer = input.parentNode.querySelector('.file-preview') ||\n                           createFilePreviewContainer(input);\n\n    previewContainer.innerHTML = '\n        <div class=\"file-info d-flex align-items-center\">\n            <i class=\"bi bi-file-pdf text-danger fs-3 me-3\"></i>\n            <div>\n                <div class=\"fw-bold\">' + file.name + '</div>\n                <div class=\"text-muted small\">' + formatFileSize(file.size) + '</div>\n            </div>\n            <button type=\"button\" class=\"btn btn-sm btn-outline-danger ms-auto\" onclick=\"clearFile(this)\">\n                <i class=\"bi bi-x\"></i>\n            </button>\n        </div>\n    ';\n\n    previewContainer.style.display = 'block';\n}\n\n/**\n * Create file preview container\n */\nfunction createFilePreviewContainer(input) {\n    const container = document.createElement('div');\n    container.className = 'file-preview mt-2 p-3 border rounded';\n    container.style.display = 'none';\n\n    input.parentNode.appendChild(container);\n    return container;\n}\n\n/**\n * Clear selected file\n */\nfunction clearFile(button) {\n    const previewContainer = button.closest('.file-preview');\n    const input = previewContainer.parentNode.querySelector('input[type=\"file\"]');\n\n    input.value = '';\n    previewContainer.style.display = 'none';\n}\n\n/**\n * Setup file validation\n */\nfunction setupFileValidation(input) {\n    input.addEventListener('change', function() {\n        const file = this.files[0];\n        if (file) {\n            validateFileUpload(file, input);\n        }\n    });\n}\n\n/**\n * Validate file upload\n */\nfunction validateFileUpload(file, input) {\n    const maxSize = 16 * 1024 * 1024; // 16MB\n    const allowedTypes = ['application/pdf'];\n\n    if (file.size > maxSize) {\n        showToast('error', 'Plik jest za duÅ¼y. Maksymalny rozmiar to 16MB.');\n        input.value = '';\n        return false;\n    }\n\n    if (!allowedTypes.includes(file.type)) {\n        showToast('error', 'Dozwolone sÄ… tylko pliki PDF.');\n        input.value = '';\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Setup toast notification system\n */\nfunction setupToastSystem() {\n    // Create toast container if it doesn't exist\n    if (!document.querySelector('.toast-container')) {\n        createToastContainer();\n    }\n}\n\n/**\n * Create toast container\n */\nfunction createToastContainer() {\n    const container = document.createElement('div');\n    container.className = 'toast-container position-fixed bottom-0 end-0 p-3';\n    container.style.zIndex = '9999';\n\n    document.body.appendChild(container);\n}\n\n/**\n * Show toast notification\n */\nfunction showToast(type, message, duration = 5000) {\n    const container = document.querySelector('.toast-container');\n    const toastId = 'toast-' + Date.now();\n\n    const toast = document.createElement('div');\n    toast.className = 'toast';\n    toast.id = toastId;\n    toast.setAttribute('role', 'alert');\n    toast.setAttribute('aria-live', 'assertive');\n    toast.setAttribute('aria-atomic', 'true');\n\n    const bgClass = type === 'success' ? 'bg-success' :\n                   type === 'error' ? 'bg-danger' :\n                   type === 'warning' ? 'bg-warning' : 'bg-info';\n\n    const icon = type === 'success' ? 'check-circle-fill' :\n                type === 'error' ? 'exclamation-triangle-fill' :\n                type === 'warning' ? 'exclamation-triangle-fill' : 'info-circle-fill';\n\n    toast.innerHTML = '\n        <div class=\"toast-header ' + bgClass + ' text-white\">\n            <i class=\"bi bi-' + icon + ' me-2\"></i>\n            <strong class=\"me-auto\">' + (type === 'success' ? 'Sukces' :\n                                    type === 'error' ? 'BÅ‚Ä…d' :\n                                    type === 'warning' ? 'OstrzeÅ¼enie' : 'Informacja') + '</strong>\n            <button type=\"button\" class=\"btn-close btn-close-white\" data-bs-dismiss=\"toast\"></button>\n        </div>\n        <div class=\"toast-body\">\n            ' + message + '\n        </div>\n    ';\n\n    container.appendChild(toast);\n\n    const bsToast = new bootstrap.Toast(toast, {\n        delay: duration\n    });\n\n    bsToast.show();\n\n    // Remove toast element after it's hidden\n    toast.addEventListener('hidden.bs.toast', () => {\n        toast.remove();\n    });\n\n    return bsToast;\n}\n\n/**\n * Setup animations\n */\nfunction setupAnimations() {\n    // Intersection Observer for fade-in animations\n    const observerOptions = {\n        threshold: 0.1,\n        rootMargin: '0px 0px -50px 0px'\n    };\n\n    const observer = new IntersectionObserver((entries) => {\n        entries.forEach(entry => {\n            if (entry.isIntersecting) {\n                entry.target.classList.add('animate-in');\n            }\n        });\n    }, observerOptions);\n\n    // Observe elements with animation classes\n    document.querySelectorAll('.animate-on-scroll').forEach(el => {\n        observer.observe(el);\n    });\n\n    // Smooth scroll for anchor links\n    document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\n        anchor.addEventListener('click', function(e) {\n            e.preventDefault();\n            const target = document.querySelector(this.getAttribute('href'));\n            if (target) {\n                target.scrollIntoView({\n                    behavior: 'smooth',\n                    block: 'start'\n                });\n            }\n        });\n    });\n}\n\n/**\n * Initialize tooltips\n */\nfunction initializeTooltips() {\n    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\n    tooltipTriggerList.map(function(tooltipTriggerEl) {\n        return new bootstrap.Tooltip(tooltipTriggerEl);\n    });\n}\n\n/**\n * Handle custom actions\n */\nfunction handleAction(action, element) {\n    switch (action) {\n        case 'copy-text':\n            copyTextToClipboard(element.dataset.text);\n            break;\n        case 'download-text':\n            downloadText(element.dataset.text, element.dataset.filename);\n            break;\n        case 'scroll-to':\n            scrollToElement(element.dataset.target);\n            break;\n        default:\n            console.log('Unknown action:', action);\n    }\n}\n\n/**\n * Copy text to clipboard\n */\nasync function copyTextToClipboard(text) {\n    try {\n        if (navigator.clipboard && window.isSecureContext) {\n            await navigator.clipboard.writeText(text);\n        } else {\n            // Fallback for older browsers\n            const textArea = document.createElement('textarea');\n            textArea.value = text;\n            textArea.style.position = 'fixed';\n            textArea.style.left = '-999999px';\n            textArea.style.top = '-999999px';\n            document.body.appendChild(textArea);\n            textArea.focus();\n            textArea.select();\n            document.execCommand('copy');\n            textArea.remove();\n        }\n        showToast('success', 'Tekst zostaÅ‚ skopiowany do schowka!');\n    } catch (err) {\n        showToast('error', 'Nie udaÅ‚o siÄ™ skopiowaÄ‡ tekstu.');\n        console.error('Copy failed:', err);\n    }\n}\n\n/**\n * Download text as file\n */\nfunction downloadText(text, filename = 'download.txt') {\n    const blob = new Blob([text], { type: 'text/plain;charset=utf-8' });\n    const url = window.URL.createObjectURL(blob);\n\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    a.style.display = 'none';\n\n    document.body.appendChild(a);\n    a.click();\n\n    window.URL.revokeObjectURL(url);\n    document.body.removeChild(a);\n\n    showToast('success', 'Plik zostaÅ‚ pobrany!');\n}\n\n/**\n * Scroll to element\n */\nfunction scrollToElement(selector) {\n    const target = document.querySelector(selector);\n    if (target) {\n        target.scrollIntoView({\n            behavior: 'smooth',\n            block: 'start'\n        });\n    }\n}\n\n/**\n * Cleanup old sessions from localStorage\n */\nfunction cleanupOldSessions() {\n    const now = Date.now();\n    const oneDay = 24 * 60 * 60 * 1000; // 24 hours in milliseconds\n\n    for (let key in localStorage) {\n        if (key.startsWith('cv-session-')) {\n            try {\n                const data = JSON.parse(localStorage[key]);\n                if (data.timestamp && (now - data.timestamp) > oneDay) {\n                    localStorage.removeItem(key);\n                }\n            } catch (e) {\n                // Remove invalid entries\n                localStorage.removeItem(key);\n            }\n        }\n    }\n}\n\n/**\n * Utility functions\n */\n\nfunction isValidEmail(email) {\n    const emailRegex = /^[^\s@]+@[^\s@]+\\.[^\s@]+$/;\n    return emailRegex.test(email);\n}\n\nfunction isValidFile(file, accept) {\n    if (!accept) return true;\n\n    const acceptedTypes = accept.split(',').map(type => type.trim());\n    return acceptedTypes.some(type => {\n        if (type.startsWith('.')) {\n            return file.name.toLowerCase().endsWith(type.toLowerCase());\n        } else {\n            return file.type === type;\n        }\n    });\n}\n\nfunction formatFileSize(bytes) {\n    if (bytes === 0) return '0 Bytes';\n\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\nfunction debounce(func, wait, immediate) {\n    let timeout;\n    return function executedFunction(...args) {\n        const later = () => {\n            timeout = null;\n            if (!immediate) func.apply(this, args);\n        };\n        const callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) func.apply(this, args);\n    };\n}\n\nfunction throttle(func, limit) {\n    let inThrottle;\n    return function(...args) {\n        if (!inThrottle) {\n            func.apply(this, args);\n            inThrottle = true;\n            setTimeout(() => inThrottle = false, limit);\n        }\n    };\n}\n\n// Service Worker Registration (for offline support)\nif ('serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n        navigator.serviceWorker.register('/static/service-worker.js')\n            .then(registration => {\n                console.log('SW registered: ', registration);\n            })\n            .catch(registrationError => {\n                console.log('SW registration failed: ', registrationError);\n            });\n    });\n}\n\n// Global error handler\n    window.addEventListener('error', function(e) {\n        console.log('Global error:', e);\n\n        // Hide loading states on error\n        const loadingElements = document.querySelectorAll('.spinner-border, [id$=\"loadingState\"]');\n        loadingElements.forEach(el => {\n            if (el) el.style.display = 'none';\n        });\n    });\n\n// Handle unhandled promise rejections\nwindow.addEventListener('unhandledrejection', function(e) {\n    console.error('Unhandled promise rejection:', e.reason);\n    showToast('error', 'WystÄ…piÅ‚ bÅ‚Ä…d podczas przetwarzania. ProszÄ™ sprÃ³bowaÄ‡ ponownie.');\n});\n\n// Export functions for global use\nwindow.CVOptimizer = {\n    showToast,\n    copyTextToClipboard,\n    downloadText,\n    validateForm,\n    formatFileSize\n};\n"
  }
]