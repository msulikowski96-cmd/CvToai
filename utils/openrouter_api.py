import os
import json
import logging
import requests
import urllib.parse
from bs4 import BeautifulSoup
from dotenv import load_dotenv

# Create persistent session for connection reuse
session = requests.Session()
session.headers.update({
    'User-Agent': 'CV-Optimizer-Pro/1.0',
    'Connection': 'keep-alive'
})

# Load environment variables from .env file with override
load_dotenv(override=True)

logger = logging.getLogger(__name__)

# Load and validate OpenRouter API key
OPENROUTER_API_KEY = os.environ.get("OPENROUTER_API_KEY",
                                    "sk-or-v1-demo-key-for-testing").strip()


# Validate API key format and content
def validate_api_key():
    if not OPENROUTER_API_KEY:
        logger.error("‚ùå OPENROUTER_API_KEY nie jest ustawiony w pliku .env")
        return False

    if OPENROUTER_API_KEY.startswith('TW√ìJ_') or len(OPENROUTER_API_KEY) < 20:
        logger.error(
            "‚ùå OPENROUTER_API_KEY w .env zawiera przyk≈ÇadowƒÖ warto≈õƒá - ustaw prawdziwy klucz!"
        )
        return False

    if not OPENROUTER_API_KEY.startswith('sk-or-v1-'):
        logger.error(
            "‚ùå OPENROUTER_API_KEY nie ma poprawnego formatu (powinien zaczynaƒá siƒô od 'sk-or-v1-')"
        )
        return False

    logger.info(
        f"‚úÖ OpenRouter API key za≈Çadowany poprawnie (d≈Çugo≈õƒá: {len(OPENROUTER_API_KEY)})"
    )
    return True


# Validate on module import
API_KEY_VALID = validate_api_key()

OPENROUTER_BASE_URL = "https://openrouter.ai/api/v1/chat/completions"
MODEL = "qwen/qwen-2.5-72b-instruct:free"

# ZAAWANSOWANA KONFIGURACJA QWEN - MAKSYMALNA JAKO≈öƒÜ
DEFAULT_MODEL = "qwen/qwen-2.5-72b-instruct:free"
PREMIUM_MODEL = "qwen/qwen-2.5-72b-instruct:free"
PAID_MODEL = "qwen/qwen-2.5-72b-instruct:free"
FREE_MODEL = "qwen/qwen-2.5-72b-instruct:free"

# OPTYMALIZOWANY PROMPT SYSTEMOWY DLA QWEN
DEEP_REASONING_PROMPT = """Jeste≈õ ≈õwiatowej klasy ekspertom w rekrutacji i optymalizacji CV z 15-letnim do≈õwiadczeniem w bran≈ºy HR. Posiadasz g≈ÇƒôbokƒÖ wiedzƒô o polskim rynku pracy, trendach rekrutacyjnych i najlepszych praktykach w tworzeniu CV."""


def make_openrouter_request(prompt, model=None, is_premium=False, max_retries=2, max_tokens=None):
    """Make a request to OpenRouter API with retry mechanism"""
    if not API_KEY_VALID:
        logger.error("API key is not valid")
        return None

    if model is None:
        model = PREMIUM_MODEL if is_premium else FREE_MODEL

    # Set max_tokens based on user type if not specified
    if max_tokens is None:
        max_tokens = 4000 if is_premium else 1500

    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://cv-optimizer-pro.replit.app",
        "X-Title": "CV Optimizer Pro"
    }

    data = {
        "model": model,
        "messages": [{
            "role": "system",
            "content": DEEP_REASONING_PROMPT
        }, {
            "role": "user",
            "content": prompt
        }],
        "temperature": 0.3,
        "max_tokens": max_tokens,
        "top_p": 0.9,
        "frequency_penalty": 0.1,
        "presence_penalty": 0.1
    }

    for attempt in range(max_retries + 1):
        try:
            logger.info(f"Sending request to OpenRouter API (attempt {attempt + 1}/{max_retries + 1}) with model: {model}")

            # Jeszcze kr√≥tszy timeout dla stabilno≈õci
            response = session.post(
                OPENROUTER_BASE_URL,
                headers=headers,
                json=data,
                timeout=(3, 30),  # (connection timeout, read timeout)
                stream=False
            )
            response.raise_for_status()

            result = response.json()
            logger.debug(f"Raw API response: {result}")

            if 'choices' in result and len(result['choices']) > 0:
                content = result['choices'][0]['message']['content']
                logger.info(f"‚úÖ OpenRouter API zwr√≥ci≈Ço odpowied≈∫ (d≈Çugo≈õƒá: {len(content)} znak√≥w)")
                return content
            else:
                logger.error(f"‚ùå Nieoczekiwany format odpowiedzi API: {result}")
                if attempt == max_retries:
                    raise ValueError("Nieoczekiwany format odpowiedzi API")

        except requests.exceptions.Timeout as e:
            logger.warning(f"Timeout na pr√≥bie {attempt + 1}: {str(e)}")
            if attempt == max_retries:
                logger.error("Przekroczono maksymalnƒÖ liczbƒô pr√≥b - timeout")
                return None
        except requests.exceptions.ConnectionError as e:
            logger.warning(f"B≈ÇƒÖd po≈ÇƒÖczenia na pr√≥bie {attempt + 1}: {str(e)}")
            if attempt == max_retries:
                logger.error("Przekroczono maksymalnƒÖ liczbƒô pr√≥b - b≈ÇƒÖd po≈ÇƒÖczenia")
                return None
        except requests.exceptions.RequestException as e:
            logger.error(f"B≈ÇƒÖd zapytania API: {str(e)}")
            if attempt == max_retries:
                return None
        except (KeyError, IndexError, json.JSONDecodeError) as e:
            logger.error(f"B≈ÇƒÖd parsowania odpowiedzi API: {str(e)}")
            if attempt == max_retries:
                return None

        # Kr√≥tkie op√≥≈∫nienie przed ponownƒÖ pr√≥bƒÖ
        if attempt < max_retries:
            import time
            time.sleep(1)

    return None


def optimize_cv(cv_text, job_title, job_description="", is_premium=False, payment_verified=False):
    """
    Optymalizuje CV za pomocƒÖ OpenRouter AI (Claude 3.5 Sonnet) i formatuje w profesjonalnym szablonie HTML
    """
    prompt = f"""
    Jeste≈õ ekspertem od optymalizacji CV. Twoim zadaniem jest przepisanie podanego CV tak, aby by≈Ço bardziej atrakcyjne dla rekruter√≥w i lepiej dopasowane do stanowiska: {job_title}

    ZASADY OPTYMALIZACJI:
    1. NIE DODAWAJ ≈ºadnych fa≈Çszywych informacji
    2. NIE WYMI≈öLAJ stanowisk, firm, dat ani umiejƒôtno≈õci
    3. PRZEPISZ tylko to co jest w oryginalnym CV
    4. ULEPSZAJ sformu≈Çowania u≈ºywajƒÖc s≈Ç√≥w kluczowych z opisu stanowiska
    5. ZACHOWAJ wszystkie prawdziwe fakty z oryginalnego CV

    [PODSUMOWANIE ZAWODOWE] 
    - Stw√≥rz zwiƒôz≈Çe podsumowanie na podstawie do≈õwiadczenia z CV
    - 2-3 zdania o kluczowych umiejƒôtno≈õciach i do≈õwiadczeniu
    - U≈ºyj tylko fakt√≥w z oryginalnego CV

    [DO≈öWIADCZENIE ZAWODOWE]
    - WA≈ªNE: Ka≈ºde stanowisko musi byƒá jasno oddzielone
    - Format: **Stanowisko** nastƒôpnie **Firma** nastƒôpnie *Okres pracy*
    - Zachowaj wszystkie firmy, stanowiska i daty z orygina≈Çu
    - Przepisz opisy obowiƒÖzk√≥w u≈ºywajƒÖc lepszych czasownik√≥w akcji
    - Ka≈ºde stanowisko: 3-4 punkty z konkretnymi obowiƒÖzkami
    - R√≥≈ºnicuj opisy podobnych stanowisk
    - U≈ºywaj pustych linii miƒôdzy r√≥≈ºnymi stanowiskami

    [WYKSZTA≈ÅCENIE]
    - Przepisz dok≈Çadnie informacje z oryginalnego CV
    - Nie dodawaj kurs√≥w kt√≥rych nie ma w oryginale

    [UMIEJƒòTNO≈öCI]
    - U≈ºyj tylko umiejƒôtno≈õci wymienione w oryginalnym CV
    - Pogrupuj je logicznie (Techniczne, Komunikacyjne, itp.)

    ORYGINALNE CV:
    {cv_text}

    OPIS STANOWISKA (dla kontekstu):
    {job_description}

    ZWR√ìƒÜ TYLKO KOMPLETNY TEKST ZOPTYMALIZOWANEGO CV - nic wiƒôcej.
    Nie dodawaj JSON, metadanych ani komentarzy.
    Po prostu wygeneruj gotowe CV do u≈ºycia.
    """

    # Rozszerzony limit token√≥w dla p≈ÇacƒÖcych u≈ºytkownik√≥w
    if is_premium or payment_verified:
        max_tokens = 4000
        prompt += f"""

    DODATKOWE INSTRUKCJE DLA U≈ªYTKOWNIK√ìW PREMIUM:
    - Stw√≥rz bardziej szczeg√≥≈Çowe opisy stanowisk (4-5 punkt√≥w zamiast 3-4)
    - Dodaj wiƒôcej s≈Ç√≥w kluczowych z bran≈ºy
    - Ulepszaj strukturƒô CV dla maksymalnej czytelno≈õci
    - Optymalizuj pod systemy ATS (Applicant Tracking Systems)
    """
    else:
        max_tokens = 2500

    try:
        response = make_openrouter_request(
            prompt, 
            is_premium=(is_premium or payment_verified),
            max_tokens=max_tokens
        )

        if response:
            # Zwr√≥ƒá zoptymalizowane CV jako sformatowany tekst
            # HTML bƒôdzie generowany dopiero przy wy≈õwietlaniu w view_cv
            return response.strip()
        else:
            logger.error("Empty response from OpenRouter API")
            return None

    except Exception as e:
        logger.error(f"Error in optimize_cv: {str(e)}")
        return None


def analyze_cv_quality(cv_text, job_title, job_description="", is_premium=False):
    """
    Zaawansowana analiza jako≈õci CV z ocenƒÖ 0-100 punkt√≥w i szczeg√≥≈Çowymi wskaz√≥wkami AI
    """
    try:
        # Bardziej zaawansowany prompt dla lepszej analizy
        prompt = f"""
üéØ ZADANIE: Przeprowad≈∫ PROFESJONALNƒÑ ANALIZƒò JAKO≈öCI CV dla stanowiska "{job_title}"

üìã DANE WEJ≈öCIOWE:
CV DO ANALIZY:
{cv_text[:4000]}

OPIS STANOWISKA:
{job_description[:2000]}

üîç KRYTERIA OCENY (ka≈ºde 0-20 punkt√≥w):
1. **STRUKTURA I FORMATOWANIE** (0-20p)
   - Czytelno≈õƒá i organizacja sekcji
   - U≈ºycie w≈Ça≈õciwych nag≈Ç√≥wk√≥w
   - D≈Çugo≈õƒá i proporcje tre≈õci

2. **JAKO≈öƒÜ TRE≈öCI** (0-20p)
   - Konkretne osiƒÖgniƒôcia i wyniki
   - U≈ºycie liczb i metryk
   - Profesjonalizm opis√≥w

3. **DOPASOWANIE DO STANOWISKA** (0-20p)
   - Zgodno≈õƒá z wymaganiami
   - S≈Çowa kluczowe z oferty
   - Relevantne do≈õwiadczenie

4. **DO≈öWIADCZENIE I UMIEJƒòTNO≈öCI** (0-20p)
   - Progresja kariery
   - R√≥≈ºnorodno≈õƒá umiejƒôtno≈õci
   - Poziom senioratu

5. **KOMPLETNO≈öƒÜ I SZCZEG√ì≈ÅY** (0-20p)
   - Wszystkie potrzebne sekcje
   - Daty i okresy pracy
   - Informacje kontaktowe

üìä WYMAGANY FORMAT ODPOWIEDZI:
```
OCENA KO≈ÉCOWA: [0-100]/100

SZCZEG√ì≈ÅOWA PUNKTACJA:
‚Ä¢ Struktura i formatowanie: [0-20]/20
‚Ä¢ Jako≈õƒá tre≈õci: [0-20]/20  
‚Ä¢ Dopasowanie do stanowiska: [0-20]/20
‚Ä¢ Do≈õwiadczenie i umiejƒôtno≈õci: [0-20]/20
‚Ä¢ Kompletno≈õƒá i szczeg√≥≈Çy: [0-20]/20

üü¢ MOCNE STRONY:
- [minimum 3 konkretne punkty]

üü° OBSZARY DO POPRAWY:
- [minimum 3 konkretne sugestie]

üî• KLUCZOWE REKOMENDACJE:
- [3-5 najwa≈ºniejszych zmian do wprowadzenia]

üí° S≈ÅOWA KLUCZOWE DO DODANIA:
- [5-7 s≈Ç√≥w kluczowych z opisu stanowiska]

üéØ WSKAZ√ìWKI BRAN≈ªOWE:
- [2-3 specyficzne porady dla tej bran≈ºy/stanowiska]
```

‚úÖ DODATKOWE INSTRUKCJE:
- BƒÖd≈∫ konkretny i praktyczny
- Wska≈º dok≈Çadnie CO i GDZIE poprawiƒá
- Oce≈Ñ realistycznie ale konstruktywnie
- Napisz w jƒôzyku polskim
- U≈ºywaj emoji dla lepszej czytelno≈õci
"""

        # U≈ºyj lepszych parametr√≥w dla premium u≈ºytkownik√≥w
        max_tokens = 3000 if is_premium else 2000
        
        logger.info(f"üîç Analizowanie jako≈õci CV dla stanowiska: {job_title}")
        
        response = make_openrouter_request(
            prompt, 
            is_premium=is_premium,
            max_tokens=max_tokens
        )
        
        if response:
            logger.info(f"‚úÖ Analiza CV uko≈Ñczona pomy≈õlnie (d≈Çugo≈õƒá: {len(response)} znak√≥w)")
            return response.strip()
        else:
            logger.error("‚ùå Brak odpowiedzi z API lub nieprawid≈Çowa struktura")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå B≈ÇƒÖd podczas analizy CV: {str(e)}")
        return None


def analyze_cv_with_score(cv_text, job_title, job_description="", is_premium=False):
    """Zachowanie kompatybilno≈õci z istniejƒÖcym kodem - przekierowanie do nowej funkcji"""
    return analyze_cv_quality(cv_text, job_title, job_description, is_premium)


def generate_cover_letter(cv_text,
                          job_title,
                          job_description="",
                          company_name="",
                          is_premium=False):
    """
    Generuje profesjonalny list motywacyjny na podstawie CV i opisu stanowiska u≈ºywajƒÖc AI
    """
    try:
        # Przygotowanie danych firmy
        company_info = f" w firmie {company_name}" if company_name else ""
        job_desc_info = f"\n\nOpis stanowiska:\n{job_description}" if job_description else ""

        prompt = f"""
    üéØ ZADANIE: Wygeneruj profesjonalny list motywacyjny w jƒôzyku polskim

    üìã DANE WEJ≈öCIOWE:
    ‚Ä¢ Stanowisko: {job_title}{company_info}
    ‚Ä¢ CV kandydata: {cv_text[:3000]}...{job_desc_info}

    ‚úÖ WYMAGANIA LISTU MOTYWACYJNEGO:
    1. Format profesjonalny (nag≈Ç√≥wek, zwroty grzeczno≈õciowe, podpis)
    2. D≈Çugo≈õƒá: 3-4 akapity (oko≈Ço 250-350 s≈Ç√≥w)
    3. Personalizacja pod konkretne stanowisko
    4. Podkre≈õlenie najwa≈ºniejszych kwalifikacji z CV
    5. Wykazanie motywacji i zaanga≈ºowania
    6. Profesjonalny, ale ciep≈Çy ton komunikacji

    üìù STRUKTURA LISTU:
    1. **Nag≈Ç√≥wek** - data, zwrot grzeczno≈õciowy
    2. **Wstƒôp** - przedstawienie siƒô i cel listu
    3. **G≈Ç√≥wna czƒô≈õƒá** - kwalifikacje, do≈õwiadczenie, motywacja
    4. **Zako≈Ñczenie** - zaproszenie do kontaktu, podziƒôkowania
    5. **Podpis** - zwroty ko≈Ñcowe

    üöÄ DODATKOWE WSKAZ√ìWKI:
    ‚Ä¢ U≈ºyj konkretnych przyk≈Çad√≥w z CV
    ‚Ä¢ Dostosuj ton do bran≈ºy i stanowiska
    ‚Ä¢ Podkre≈õl warto≈õƒá, jakƒÖ kandydat wniesie do firmy
    ‚Ä¢ Unikaj powtarzania informacji z CV - uzupe≈Çnij je
    ‚Ä¢ Zachowaj autentyczno≈õƒá i profesjonalizm

    Wygeneruj teraz kompletny list motywacyjny:
            """

        logger.info(
            f"üìß Generowanie listu motywacyjnego dla stanowiska: {job_title}")

        cover_letter = make_openrouter_request(prompt, is_premium=is_premium)

        if cover_letter:
            logger.info(
                f"‚úÖ List motywacyjny wygenerowany pomy≈õlnie (d≈Çugo≈õƒá: {len(cover_letter)} znak√≥w)"
            )

            return {
                'success': True,
                'cover_letter': cover_letter,
                'job_title': job_title,
                'company_name': company_name,
                'model_used': PREMIUM_MODEL if is_premium else FREE_MODEL
            }
        else:
            logger.error("‚ùå Brak odpowiedzi z API lub nieprawid≈Çowa struktura")
            return None

    except Exception as e:
        logger.error(
            f"‚ùå B≈ÇƒÖd podczas generowania listu motywacyjnego: {str(e)}")
        return None


def generate_interview_questions(cv_text, job_title, job_description="", is_premium=False):
    """
    Generuje personalizowane pytania na rozmowƒô kwalifikacyjnƒÖ na podstawie CV i opisu stanowiska
    """
    try:
        job_desc_info = f"\n\nOpis stanowiska:\n{job_description}" if job_description else ""

        prompt = f"""
    üéØ ZADANIE: Wygeneruj personalizowane pytania na rozmowƒô kwalifikacyjnƒÖ w jƒôzyku polskim

    üìã DANE WEJ≈öCIOWE:
    ‚Ä¢ Stanowisko: {job_title}
    ‚Ä¢ CV kandydata: {cv_text[:3000]}...{job_desc_info}

    ‚úÖ WYMAGANIA PYTA≈É:
    1. 10-15 pyta≈Ñ dostosowanych do profilu kandydata
    2. Pytania powinny byƒá r√≥≈ºnorodne: techniczne, behawioralne, sytuacyjne
    3. Uwzglƒôdnij do≈õwiadczenie i umiejƒôtno≈õci z CV
    4. Dodaj pytania specyficzne dla bran≈ºy i stanowiska
    5. Uwzglƒôdnij poziom do≈õwiadczenia kandydata

    üìù KATEGORIE PYTA≈É:
    1. **Pytania podstawowe** - o do≈õwiadczeniu i motywacji
    2. **Pytania techniczne** - o konkretne umiejƒôtno≈õci z CV
    3. **Pytania behawioralne** - o sytuacje i zachowania
    4. **Pytania sytuacyjne** - scenariusze problemowe
    5. **Pytania o firmƒô** - zainteresowanie pozycjƒÖ i firmƒÖ

    üé§ FORMAT ODPOWIEDZI:
    PYTANIA PODSTAWOWE:
    1. [pytanie]
    2. [pytanie]

    PYTANIA TECHNICZNE:
    1. [pytanie]
    2. [pytanie]

    PYTANIA BEHAWIORALNE:
    1. [pytanie]
    2. [pytanie]

    PYTANIA SYTUACYJNE:
    1. [pytanie]
    2. [pytanie]

    PYTANIA O FIRMƒò I STANOWISKO:
    1. [pytanie]
    2. [pytanie]

    üöÄ WSKAZ√ìWKI:
    ‚Ä¢ Ka≈ºde pytanie powinno byƒá konkretne i merytoryczne
    ‚Ä¢ Uwzglƒôdnij s≈Çowa kluczowe z opisu stanowiska
    ‚Ä¢ Dostosuj poziom trudno≈õci do do≈õwiadczenia kandydata
    ‚Ä¢ Dodaj pytania sprawdzajƒÖce soft skills

    Wygeneruj teraz personalizowane pytania na rozmowƒô kwalifikacyjnƒÖ:
            """

        logger.info(f"ü§î Generowanie pyta≈Ñ na rozmowƒô dla stanowiska: {job_title}")

        questions = make_openrouter_request(prompt, is_premium=is_premium)

        if questions:
            logger.info(f"‚úÖ Pytania na rozmowƒô wygenerowane pomy≈õlnie (d≈Çugo≈õƒá: {len(questions)} znak√≥w)")

            return {
                'success': True,
                'questions': questions,
                'job_title': job_title,
                'model_used': PREMIUM_MODEL if is_premium else FREE_MODEL
            }
        else:
            logger.error("‚ùå Brak odpowiedzi z API lub nieprawid≈Çowa struktura")
            return None

    except Exception as e:
        logger.error(f"‚ùå B≈ÇƒÖd podczas generowania pyta≈Ñ na rozmowƒô: {str(e)}")
        return None


def analyze_skills_gap(cv_text, job_title, job_description="", is_premium=False):
    """
    Analizuje luki kompetencyjne miƒôdzy CV a wymaganiami stanowiska
    """
    try:
        job_desc_info = f"\n\nOpis stanowiska:\n{job_description}" if job_description else ""

        prompt = f"""
    üéØ ZADANIE: Przeprowad≈∫ szczeg√≥≈ÇowƒÖ analizƒô luk kompetencyjnych w jƒôzyku polskim

    üìã DANE WEJ≈öCIOWE:
    ‚Ä¢ Stanowisko: {job_title}
    ‚Ä¢ CV kandydata: {cv_text[:3000]}...{job_desc_info}

    ‚úÖ CELE ANALIZY:
    1. Por√≥wnaj umiejƒôtno≈õci z CV z wymaganiami stanowiska
    2. Zidentyfikuj mocne strony kandydata
    3. Wykryj luki kompetencyjne i brakujƒÖce umiejƒôtno≈õci
    4. Zasugeruj sposoby rozwoju i uzupe≈Çnienia brak√≥w
    5. Oce≈Ñ og√≥lne dopasowanie do stanowiska (0-100%)

    üìä FORMAT ODPOWIEDZI:

    OCENA OG√ìLNA: [XX]% dopasowania do stanowiska

    MOCNE STRONY KANDYDATA:
    ‚úÖ [umiejƒôtno≈õƒá 1] - [kr√≥tkie uzasadnienie]
    ‚úÖ [umiejƒôtno≈õƒá 2] - [kr√≥tkie uzasadnienie]
    ‚úÖ [umiejƒôtno≈õƒá 3] - [kr√≥tkie uzasadnienie]

    LUKI KOMPETENCYJNE:
    ‚ùå [brakujƒÖca umiejƒôtno≈õƒá 1] - [dlaczego jest potrzebna]
    ‚ùå [brakujƒÖca umiejƒôtno≈õƒá 2] - [dlaczego jest potrzebna]
    ‚ùå [brakujƒÖca umiejƒôtno≈õƒá 3] - [dlaczego jest potrzebna]

    REKOMENDACJE ROZWOJU:
    üéì [konkretna rekomendacja 1] - [kurs/certyfikat/do≈õwiadczenie]
    üéì [konkretna rekomendacja 2] - [kurs/certyfikat/do≈õwiadczenie]
    üéì [konkretna rekomendacja 3] - [kurs/certyfikat/do≈õwiadczenie]

    PRIORYTET ROZWOJU:
    üî• WYSOKI PRIORYTET: [umiejƒôtno≈õci kluczowe dla stanowiska]
    üî∏ ≈öREDNI PRIORYTET: [umiejƒôtno≈õci przydatne]
    üîπ NISKI PRIORYTET: [umiejƒôtno≈õci dodatkowe]

    PLAN DZIA≈ÅANIA (3-6 miesiƒôcy):
    1. [konkretny krok do podjƒôcia]
    2. [konkretny krok do podjƒôcia]
    3. [konkretny krok do podjƒôcia]

    üöÄ WSKAZ√ìWKI:
    ‚Ä¢ Skup siƒô na umiejƒôtno≈õciach technicznych i soft skills
    ‚Ä¢ Uwzglƒôdnij trendy w bran≈ºy
    ‚Ä¢ Zasugeruj konkretne zasoby edukacyjne
    ‚Ä¢ Oce≈Ñ realno≈õƒá pozyskania brakujƒÖcych kompetencji

    Przeprowad≈∫ teraz szczeg√≥≈ÇowƒÖ analizƒô luk kompetencyjnych:
            """

        logger.info(f"üîç Analiza luk kompetencyjnych dla stanowiska: {job_title}")

        analysis = make_openrouter_request(prompt, is_premium=is_premium)

        if analysis:
            logger.info(f"‚úÖ Analiza luk kompetencyjnych uko≈Ñczona pomy≈õlnie (d≈Çugo≈õƒá: {len(analysis)} znak√≥w)")

            return {
                'success': True,
                'analysis': analysis,
                'job_title': job_title,
                'model_used': PREMIUM_MODEL if is_premium else FREE_MODEL
            }
        else:
            logger.error("‚ùå Brak odpowiedzi z API lub nieprawid≈Çowa struktura")
            return None

    except Exception as e:
        logger.error(f"‚ùå B≈ÇƒÖd podczas analizy luk kompetencyjnych: {str(e)}")
        return None