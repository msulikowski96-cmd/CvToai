import os
import json
import logging
import requests
import urllib.parse
import hashlib
import time
from bs4 import BeautifulSoup
from dotenv import load_dotenv

# Create persistent session for connection reuse
session = requests.Session()
session.headers.update({
    'User-Agent': 'CV-Optimizer-Pro/1.0',
    'Connection': 'keep-alive'
})

# üíæ INTELLIGENT CACHING SYSTEM - oszczƒôdza koszty API
_cache = {}
CACHE_DURATION = 3600  # 1 godzina w sekundach


def get_cache_key(prompt, models_to_try, is_premium):
    """Generuje unikalny klucz cache dla zapytania - POPRAWIONY"""
    # U≈ºywaj ca≈Çej hierarchii modeli w kluczu
    models_str = "|".join(models_to_try)
    cache_data = f"{prompt[:500]}|{models_str}|{is_premium}"
    return hashlib.md5(cache_data.encode()).hexdigest()


def get_from_cache(cache_key):
    """Pobiera odpowied≈∫ z cache je≈õli jest aktualna"""
    if cache_key in _cache:
        cached_response, model_used, timestamp = _cache[cache_key]
        if time.time() - timestamp < CACHE_DURATION:
            logger.info(
                f"üíæ Cache hit! Zwracam odpowied≈∫ z cache (model: {model_used}, oszczƒôdno≈õci API)"
            )
            return cached_response
        else:
            # Usu≈Ñ przestarza≈Çy cache
            del _cache[cache_key]
    return None


def save_to_cache(cache_key, response, model_used):
    """Zapisuje odpowied≈∫ do cache z informacjƒÖ o u≈ºytym modelu"""
    _cache[cache_key] = (response, model_used, time.time())

    # Czy≈õƒá stary cache co jaki≈õ czas (maksymalnie 100 wpis√≥w)
    if len(_cache) > 100:
        # Usu≈Ñ najstarsze wpisy
        sorted_cache = sorted(
            _cache.items(),
            key=lambda x: x[1][2])  # Sortuj po timestamp (3rd element)
        for key, _ in sorted_cache[:20]:  # Usu≈Ñ 20 najstarszych
            del _cache[key]

    logger.info(f"üíæ Zapisano do cache (obecny rozmiar: {len(_cache)} wpis√≥w)")


# Load environment variables from .env file with override
load_dotenv(override=True)

logger = logging.getLogger(__name__)

# Load and validate OpenRouter API key
OPENROUTER_API_KEY = os.environ.get("OPENROUTER_API_KEY", "").strip()


# Validate API key format and content
def validate_api_key():
    if not OPENROUTER_API_KEY:
        logger.error("‚ùå OPENROUTER_API_KEY nie jest ustawiony w pliku .env")
        return False

    if (OPENROUTER_API_KEY.startswith('TW√ìJ_') or len(OPENROUTER_API_KEY) < 20
            or OPENROUTER_API_KEY == "sk-or-v1-demo-key-for-testing"):
        logger.error(
            "‚ùå OPENROUTER_API_KEY w .env zawiera przyk≈ÇadowƒÖ warto≈õƒá - ustaw prawdziwy klucz!"
        )
        return False

    if not OPENROUTER_API_KEY.startswith('sk-or-v1-'):
        logger.error(
            "‚ùå OPENROUTER_API_KEY nie ma poprawnego formatu (powinien zaczynaƒá siƒô od 'sk-or-v1-')"
        )
        return False

    logger.info(
        f"‚úÖ OpenRouter API key za≈Çadowany poprawnie (d≈Çugo≈õƒá: {len(OPENROUTER_API_KEY)})"
    )
    return True


# Validate on module import
API_KEY_VALID = validate_api_key()

OPENROUTER_BASE_URL = "https://openrouter.ai/api/v1/chat/completions"

# DOSTƒòPNE MODELE AI DO WYBORU
AVAILABLE_MODELS = {
    "qwen": {
        "id": "qwen/qwen-2.5-72b-instruct:free",
        "name": "Qwen 2.5 72B Instruct (free)",
        "description": "Domy≈õlny model Qwen dla profesjonalnej optymalizacji CV",
        "capabilities": ["Optymalizacja CV", "Analiza jako≈õci", "Listy motywacyjne", "Pytania rekrutacyjne"],
        "speed": "≈õrednia",
        "quality": "bardzo wysoka"
    },
    "qwen3": {
        "id": "qwen/qwen3-235b-a22b:free",
        "name": "Qwen3-235b-a22b",
        "description": "Najnowszy model Qwen z zaawansowanymi mo≈ºliwo≈õciami analizy",
        "capabilities": ["Optymalizacja CV", "Analiza jako≈õci", "Listy motywacyjne", "Pytania rekrutacyjne"],
        "speed": "bardzo szybka",
        "quality": "wysoka"
    },
    "deepseek": {
        "id": "deepseek/deepseek-chat-v3.1:free",
        "name": "DeepSeek Chat v3.1",
        "description": "Najnowszy model DeepSeek z zaawansowanym rozumowaniem",
        "capabilities": ["Optymalizacja CV", "Analiza jako≈õci", "Listy motywacyjne", "Pytania rekrutacyjne"],
        "speed": "bardzo szybka",
        "quality": "wysoka"
    },
    "llama": {
        "id": "meta-llama/llama-3.1-8b-instruct:free",
        "name": "Llama 3.1 8B",
        "description": "Model Meta Llama z dobrƒÖ wydajno≈õciƒÖ dla zada≈Ñ CV",
        "capabilities": ["Optymalizacja CV", "Analiza jako≈õci", "Listy motywacyjne", "Pytania rekrutacyjne"],
        "speed": "bardzo szybka",
        "quality": "dobra"
    }
}

# DOMY≈öLNY MODEL - Qwen 2.5 72B Instruct jako pierwszy
DEFAULT_MODEL = "qwen/qwen-2.5-72b-instruct:free"

# NAJNOWSZY PROMPT SYSTEMOWY 2025 - MAKSYMALNA JAKO≈öƒÜ AI
DEEP_REASONING_PROMPT = """Jeste≈õ ekspertem ≈õwiata w optymalizacji CV z 20-letnim do≈õwiadczeniem w rekrutacji oraz AI. Masz specjalistycznƒÖ wiedzƒô o:

üéØ KOMPETENCJE G≈Å√ìWNE:
- Analiza CV pod kƒÖtem system√≥w ATS (Applicant Tracking Systems)
- Optymalizacja pod konkretne stanowiska i bran≈ºe w Polsce
- Psychologia rekrutacji i co przyciƒÖga uwagƒô HR-owc√≥w
- Najnowsze trendy rynku pracy 2025 w Polsce i UE
- Formatowanie CV zgodne z europejskimi standardami

üß† STRATEGIA MY≈öLENIA:
1. ANALIZUJ g≈Çƒôboko ka≈ºde s≈Çowo w kontek≈õcie stanowiska
2. DOPASUJ jƒôzyk i terminologiƒô do bran≈ºy
3. OPTYMALIZUJ pod kƒÖtem s≈Ç√≥w kluczowych ATS
4. ZACHOWAJ autentyczno≈õƒá i prawdƒô o kandydacie
5. ZASTOSUJ najlepsze praktyki formatowania

‚ö° JAKO≈öƒÜ ODPOWIEDZI:
- U≈ºywaj precyzyjnego, profesjonalnego jƒôzyka polskiego
- Dawaj konkretne, actionable wskaz√≥wki
- Uwzglƒôdniaj cultural fit dla polskiego rynku pracy
- BƒÖd≈∫ kreatywny ale faktualny w opisach do≈õwiadczenia

Twoja misja: Stworzyƒá CV kt√≥re przejdzie przez ATS i zachwyci rekruter√≥w."""


# FUNKCJE DO ZARZƒÑDZANIA MODELAMI
def get_available_models():
    """Zwraca listƒô dostƒôpnych modeli AI"""
    return AVAILABLE_MODELS

def get_model_by_key(model_key):
    """Zwraca ID modelu na podstawie klucza"""
    logger.info(f"üîç DEBUG get_model_by_key: otrzymano model_key = {model_key}")
    logger.info(f"üîç DEBUG: dostƒôpne modele = {list(AVAILABLE_MODELS.keys())}")

    if model_key in AVAILABLE_MODELS:
        model_id = AVAILABLE_MODELS[model_key]["id"]
        logger.info(f"‚úÖ DEBUG: znaleziono model {model_key} -> {model_id}")
        return model_id

    logger.info(f"‚ùå DEBUG: nie znaleziono modelu {model_key}, u≈ºywam DEFAULT_MODEL = {DEFAULT_MODEL}")
    return DEFAULT_MODEL

def get_default_model(is_premium=False):
    """Zwraca domy≈õlny model"""
    # W przysz≈Ço≈õci mo≈ºna tu dodaƒá logikƒô wyboru modelu na podstawie typu u≈ºytkownika (premium/free)
    return DEFAULT_MODEL


def make_openrouter_request(prompt,
                            model=None,
                            is_premium=False,
                            max_retries=3,
                            max_tokens=None,
                            use_streaming=False,
                            use_cache=True):
    """
    üöÄ FUNKCJA OBS≈ÅUGUJƒÑCA WYB√ìR MODELI AI
    """
    if not API_KEY_VALID:
        logger.error("API key is not valid")
        return None

    # U≈ªYJ WYBRANEGO MODELU LUB DOMY≈öLNEGO
    model_to_use = get_model_by_key(model) if model else DEFAULT_MODEL
    logger.info(f"ü§ñ U≈ºywam model: {model_to_use}")

    # üíæ SPRAWD≈π CACHE NAJPIERW
    cache_key = get_cache_key(prompt, [model_to_use], is_premium)

    if use_cache:
        cached_response = get_from_cache(cache_key)
        if cached_response:
            return cached_response

    # Parametry zoptymalizowane dla Qwen
    params = {
        "temperature": 0.3,  # Stabilna temperatura dla Qwen
        "top_p": 0.9,  # Dobre fokusowanie na najlepszych tokenach
        "frequency_penalty": 0.1,  # Unikaj powt√≥rze≈Ñ
        "presence_penalty": 0.1,  # Zachƒôcaj do r√≥≈ºnorodno≈õci
        "max_tokens": max_tokens or 3500  # Dobre d≈Çugie odpowiedzi
    }

    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://cv-optimizer-pro.replit.app",
        "X-Title": "CV Optimizer Pro"
    }

    data = {
        "model":
        model_to_use,
        "messages": [{
            "role": "system",
            "content": DEEP_REASONING_PROMPT
        }, {
            "role": "user",
            "content": prompt
        }],
        **params
    }

    # Pr√≥buj z retry mechanism
    for attempt in range(max_retries):
        try:
            logger.info(
                f"üì° Sending request to OpenRouter API (attempt {attempt + 1}/{max_retries}) with model: {model_to_use}"
            )

            response = session.post(OPENROUTER_BASE_URL,
                                    headers=headers,
                                    json=data,
                                    timeout=(5, 45),
                                    stream=use_streaming)
            response.raise_for_status()

            result = response.json()

            if 'choices' in result and len(result['choices']) > 0:
                content = result['choices'][0]['message']['content']
                logger.info(
                    f"‚úÖ Model {model_to_use} zwr√≥ci≈Ç odpowied≈∫ (d≈Çugo≈õƒá: {len(content)} znak√≥w)"
                )

                # üíæ ZAPISZ DO CACHE
                if use_cache:
                    save_to_cache(cache_key, content, model_to_use)

                return content
            else:
                logger.warning(f"‚ö†Ô∏è Nieoczekiwany format odpowiedzi: {result}")

        except requests.exceptions.Timeout:
            logger.warning(f"‚è∞ Timeout na pr√≥bie {attempt + 1}")

        except requests.exceptions.RequestException as e:
            logger.warning(
                f"üö´ B≈ÇƒÖd zapytania na pr√≥bie {attempt + 1}: {str(e)}")

        except Exception as e:
            logger.warning(f"‚ùå Nieoczekiwany b≈ÇƒÖd: {str(e)}")

        # Op√≥≈∫nienie przed ponownƒÖ pr√≥bƒÖ
        if attempt < max_retries - 1:
            import time
            time.sleep(1.5)

    # Je≈õli wszystkie pr√≥by zawiod≈Çy
    logger.error(
        f"‚ùå Model {model_to_use} nie odpowiedzia≈Ç po {max_retries} pr√≥bach")
    return None


# Dummy function for create_optimization_prompt as it's used in the changes
def create_optimization_prompt(cv_text, job_title, job_description, is_premium):
    """
    Generates the prompt for CV optimization.
    This is a placeholder and should be replaced with the actual prompt logic.
    """
    prompt = f"""
    Jeste≈õ ekspertem od optymalizacji CV. Twoim zadaniem jest przepisanie podanego CV tak, aby by≈Ço bardziej atrakcyjne dla rekruter√≥w i lepiej dopasowane do stanowiska: {job_title}

    ZASADY OPTYMALIZACJI:
    1. NIE DODAWAJ ≈ºadnych fa≈Çszywych informacji
    2. NIE WYMI≈öLAJ stanowisk, firm, dat ani umiejƒôtno≈õci
    3. PRZEPISZ tylko to co jest w oryginalnym CV
    4. ULEPSZAJ sformu≈Çowania u≈ºywajƒÖc s≈Ç√≥w kluczowych z opisu stanowiska
    5. ZACHOWAJ wszystkie prawdziwe fakty z oryginalnego CV

    [PODSUMOWANIE ZAWODOWE]
    - Stw√≥rz zwiƒôz≈Çe podsumowanie na podstawie do≈õwiadczenia z CV
    - 2-3 zdania o kluczowych umiejƒôtno≈õciach i do≈õwiadczeniu
    - U≈ºyj tylko fakt√≥w z oryginalnego CV

    [DO≈öWIADCZENIE ZAWODOWE]
    - KRYTYCZNY FORMAT: Ka≈ºde stanowisko musi zaczynaƒá siƒô od "--- STANOWISKO ---"
    - Struktura ka≈ºdego stanowiska:
      --- STANOWISKO ---
      **Nazwa stanowiska**
      **Nazwa firmy**
      *Okres pracy (rok-rok)*
      - Pierwszy obowiƒÖzek
      - Drugi obowiƒÖzek
      - Trzeci obowiƒÖzek

    - Zachowaj wszystkie firmy, stanowiska i daty z orygina≈Çu
    - Przepisz opisy obowiƒÖzk√≥w u≈ºywajƒÖc lepszych czasownik√≥w akcji
    - Ka≈ºde stanowisko: 3-4 punkty z konkretnymi obowiƒÖzkami
    - KONIECZNIE u≈ºywaj separatora "--- STANOWISKO ---" przed ka≈ºdym nowym stanowiskiem
    - R√≥≈ºnicuj opisy podobnych stanowisk

    [WYKSZTA≈ÅCENIE]
    - Przepisz dok≈Çadnie informacje z oryginalnego CV
    - Nie dodawaj kurs√≥w kt√≥rych nie ma w oryginale

    [UMIEJƒòTNO≈öCI]
    - U≈ºyj tylko umiejƒôtno≈õci wymienione w oryginalnym CV
    - Pogrupuj je logicznie (Techniczne, Komunikacyjne, itp.)

    ORYGINALNE CV:
    {cv_text}

    OPIS STANOWISKA (dla kontekstu):
    {job_description}

    ZWR√ìƒÜ TYLKO KOMPLETNY TEKST ZOPTYMALIZOWANEGO CV - nic wiƒôcej.
    Nie dodawaj JSON, metadanych ani komentarzy.
    Po prostu wygeneruj gotowe CV do u≈ºycia.
    """

    # Rozszerzony limit token√≥w dla p≈ÇacƒÖcych u≈ºytkownik√≥w
    if is_premium:
        prompt += f"""

    DODATKOWE INSTRUKCJE DLA U≈ªYTKOWNIK√ìW PREMIUM:
    - Stw√≥rz bardziej szczeg√≥≈Çowe opisy stanowisk (4-5 punkt√≥w zamiast 3-4)
    - Dodaj wiƒôcej s≈Ç√≥w kluczowych z bran≈ºy
    - Ulepszaj strukturƒô CV dla maksymalnej czytelno≈õci
    - Optymalizuj pod systemy ATS (Applicant Tracking Systems)
    """
    return prompt


def optimize_cv(cv_text,
                job_title,
                job_description="",
                is_premium=False,
                selected_model=None):
    """
    Optymalizuje CV za pomocƒÖ OpenRouter AI z obs≈ÇugƒÖ timeout
    """
    try:
        # Use selected model or fallback to default
        logger.info(f"üìù DEBUG optimize_cv: received selected_model = {selected_model}")
        
        if selected_model:
            model = get_model_by_key(selected_model)
            logger.info(f"üìù DEBUG optimize_cv: using selected model {selected_model} -> {model}")
        else:
            model = get_default_model(is_premium)
            logger.info(f"üìù DEBUG optimize_cv: using default model = {model}")

        prompt = create_optimization_prompt(cv_text, job_title, job_description, is_premium)

        # Set timeout to 90 seconds (less than gunicorn's 60s timeout)
        response = session.post(
            OPENROUTER_BASE_URL,
            headers={
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json",
                "HTTP-Referer": "https://cv-optimizer-pro.replit.app",
                "X-Title": "CV Optimizer Pro"
            },
            json={
                "model": model,
                "messages": [{"role": "user", "content": prompt}],
                "max_tokens": 4000 if is_premium else 2000,
                "temperature": 0.1
            },
            timeout=90
        )

        if response.status_code == 200:
            result = response.json()
            if 'choices' in result and len(result['choices']) > 0:
                return result['choices'][0]['message']['content']

        logger.error(f"OpenRouter API error: {response.status_code} - {response.text}")
        return None

    except requests.exceptions.Timeout:
        logger.error("OpenRouter API request timed out after 90 seconds")
        return None
    except requests.exceptions.RequestException as e:
        logger.error(f"Request error in optimize_cv: {str(e)}")
        return None
    except Exception as e:
        logger.error(f"Error in optimize_cv: {str(e)}")
        return None


def analyze_cv_quality(cv_text,
                       job_title,
                       job_description="",
                       is_premium=False,
                       selected_model=None):
    """
    Zaawansowana analiza jako≈õci CV z ocenƒÖ 0-100 punkt√≥w i szczeg√≥≈Çowymi wskaz√≥wkami AI
    """
    try:
        # Bardziej zaawansowany prompt dla lepszej analizy
        prompt = f"""
    üéØ ZADANIE: Przeprowad≈∫ PROFESJONALNƒÑ ANALIZƒò JAKO≈öCI CV dla stanowiska "{job_title}"

    üìã DANE WEJ≈öCIOWE:
    CV DO ANALIZY:
    {cv_text[:4000]}

    OPIS STANOWISKA:
    {job_description[:2000]}

    üîç KRYTERIA OCENY (ka≈ºde 0-20 punkt√≥w):
    1. **STRUKTURA I FORMATOWANIE** (0-20p)
       - Czytelno≈õƒá i organizacja sekcji
       - U≈ºycie w≈Ça≈õciwych nag≈Ç√≥wk√≥w
       - D≈Çugo≈õƒá i proporcje tre≈õci

    2. **JAKO≈öƒÜ TRE≈öCI** (0-20p)
       - Konkretne osiƒÖgniƒôcia i wyniki
       - U≈ºycie liczb i metryk
       - Profesjonalizm opis√≥w

    3. **DOPASOWANIE DO STANOWISKA** (0-20p)
       - Zgodno≈õƒá z wymaganiami
       - S≈Çowa kluczowe z oferty
       - Relevantne do≈õwiadczenie

    4. **DO≈öWIADCZENIE I UMIEJƒòTNO≈öCI** (0-20p)
       - Progresja kariery
       - R√≥≈ºnorodno≈õƒá umiejƒôtno≈õci
       - Poziom senioratu

    5. **KOMPLETNO≈öƒÜ I SZCZEG√ì≈ÅY** (0-20p)
       - Wszystkie potrzebne sekcje
       - Daty i okresy pracy
       - Informacje kontaktowe

    üìä WYMAGANY FORMAT ODPOWIEDZI:
    ```
    OCENA KO≈ÉCOWA: [0-100]/100

    SZCZEG√ì≈ÅOWA PUNKTACJA:
    ‚Ä¢ Struktura i formatowanie: [0-20]/20
    ‚Ä¢ Jako≈õƒá tre≈õci: [0-20]/20
    ‚Ä¢ Dopasowanie do stanowiska: [0-20]/20
    ‚Ä¢ Do≈õwiadczenie i umiejƒôtno≈õci: [0-20]/20
    ‚Ä¢ Kompletno≈õƒá i szczeg√≥≈Çy: [0-20]/20

    üü¢ MOCNE STRONY:
    - [minimum 3 konkretne punkty]

    üü° OBSZARY DO POPRAWY:
    - [minimum 3 konkretne sugestie]

    üî• KLUCZOWE REKOMENDACJE:
    - [3-5 najwa≈ºniejszych zmian do wprowadzenia]

    üí° S≈ÅOWA KLUCZOWE DO DODANIA:
    - [5-7 s≈Ç√≥w kluczowych z opisu stanowiska]

    üéØ WSKAZ√ìWKI BRAN≈ªOWE:
    - [2-3 specyficzne porady dla tej bran≈ºy/stanowiska]
    ```

    ‚úÖ DODATKOWE INSTRUKCJE:
    - BƒÖd≈∫ konkretny i praktyczny
    - Wska≈º dok≈Çadnie CO i GDZIE poprawiƒá
    - Oce≈Ñ realistycznie ale konstruktywnie
    - Napisz w jƒôzyku polskim
    - U≈ºywaj emoji dla lepszej czytelno≈õci
    """

        # U≈ºyj lepszych parametr√≥w dla premium u≈ºytkownik√≥w
        max_tokens = 3000 if is_premium else 1500
        model = get_model_by_key(selected_model) if selected_model else get_default_model(is_premium)


        logger.info(f"üîç Analizowanie jako≈õci CV dla stanowiska: {job_title}")

        response = session.post(
            OPENROUTER_BASE_URL,
            headers={
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json",
                "HTTP-Referer": "https://cv-optimizer-pro.replit.app",
                "X-Title": "CV Optimizer Pro"
            },
            json={
                "model": model,
                "messages": [{"role": "user", "content": prompt}],
                "max_tokens": max_tokens,
                "temperature": 0.1
            },
            timeout=45
        )

        if response.status_code == 200:
            result = response.json()
            if 'choices' in result and len(result['choices']) > 0:
                content = result['choices'][0]['message']['content']
                logger.info(
                    f"‚úÖ Model {model} zwr√≥ci≈Ç odpowied≈∫ (d≈Çugo≈õƒá: {len(content)} znak√≥w)"
                )
                return content
            else:
                logger.warning(f"‚ö†Ô∏è Nieoczekiwany format odpowiedzi: {result}")
                return None
        else:
            logger.error(f"OpenRouter API error in analyze_cv_quality: {response.status_code} - {response.text}")
            return None

    except requests.exceptions.Timeout:
        logger.error("OpenRouter API request timed out in analyze_cv_quality")
        return None
    except requests.exceptions.RequestException as e:
        logger.error(f"Request error in analyze_cv_quality: {str(e)}")
        return None
    except Exception as e:
        logger.error(f"Error in analyze_cv_quality: {str(e)}")
        return None


def analyze_cv_with_score(cv_text,
                          job_title,
                          job_description="",
                          is_premium=False,
                          selected_model=None):
    """Zachowanie kompatybilno≈õci z istniejƒÖcym kodem - przekierowanie do nowej funkcji"""
    return analyze_cv_quality(cv_text, job_title, job_description, is_premium, selected_model)


def generate_cover_letter(cv_text,
                          job_title,
                          job_description="",
                          company_name="",
                          is_premium=False,
                          selected_model=None):
    """
    Generuje profesjonalny list motywacyjny na podstawie CV i opisu stanowiska u≈ºywajƒÖc AI
    """
    try:
        # Przygotowanie danych firmy
        company_info = f" w firmie {company_name}" if company_name else ""
        job_desc_info = f"\n\nOpis stanowiska:\n{job_description}" if job_description else ""

        prompt = f"""
    üéØ ZADANIE: Wygeneruj profesjonalny list motywacyjny w jƒôzyku polskim

    üìã DANE WEJ≈öCIOWE:
    ‚Ä¢ Stanowisko: {job_title}{company_info}
    ‚Ä¢ CV kandydata: {cv_text[:3000]}...{job_desc_info}

    ‚úÖ WYMAGANIA LISTU MOTYWACYJNEGO:
    1. Format profesjonalny (nag≈Ç√≥wek, zwroty grzeczno≈õciowe, podpis)
    2. D≈Çugo≈õƒá: 3-4 akapity (oko≈Ço 250-350 s≈Ç√≥w)
    3. Personalizacja pod konkretne stanowisko
    4. Podkre≈õlenie najwa≈ºniejszych kwalifikacji z CV
    5. Wykazanie motywacji i zaanga≈ºowania
    6. Profesjonalny, ale ciep≈Çy ton komunikacji

    üìù STRUKTURA LISTU:
    1. **Nag≈Ç√≥wek** - data, zwrot grzeczno≈õciowy
    2. **Wstƒôp** - przedstawienie siƒô i cel listu
    3. **G≈Ç√≥wna czƒô≈õƒá** - kwalifikacje, do≈õwiadczenie, motywacja
    4. **Zako≈Ñczenie** - zaproszenie do kontaktu, podziƒôkowania
    5. **Podpis** - zwroty ko≈Ñcowe

    üöÄ DODATKOWE WSKAZ√ìWKI:
    ‚Ä¢ U≈ºyj konkretnych przyk≈Çad√≥w z CV
    ‚Ä¢ Dostosuj ton do bran≈ºy i stanowiska
    ‚Ä¢ Podkre≈õl warto≈õƒá, jakƒÖ kandydat wniesie do firmy
    ‚Ä¢ Unikaj powtarzania informacji z CV - uzupe≈Çnij je
    ‚Ä¢ Zachowaj autentyczno≈õƒá i profesjonalizm

    Wygeneruj teraz kompletny list motywacyjny:
            """

        logger.info(
            f"üìß Generowanie listu motywacyjnego dla stanowiska: {job_title}")

        cover_letter = make_openrouter_request(prompt, model=selected_model, is_premium=is_premium)

        if cover_letter:
            logger.info(
                f"‚úÖ List motywacyjny wygenerowany pomy≈õlnie (d≈Çugo≈õƒá: {len(cover_letter)} znak√≥w)"
            )

            return {
                'success': True,
                'cover_letter': cover_letter,
                'job_title': job_title,
                'company_name': company_name,
                'model_used': selected_model or DEFAULT_MODEL
            }
        else:
            logger.error("‚ùå Brak odpowiedzi z API lub nieprawid≈Çowa struktura")
            return None

    except Exception as e:
        logger.error(
            f"‚ùå B≈ÇƒÖd podczas generowania listu motywacyjnego: {str(e)}")
        return None


def generate_interview_questions(cv_text,
                                 job_title,
                                 job_description="",
                                 is_premium=False,
                                 selected_model=None):
    """
    Generuje personalizowane pytania na rozmowƒô kwalifikacyjnƒÖ na podstawie CV i opisu stanowiska
    """
    try:
        job_desc_info = f"\n\nOpis stanowiska:\n{job_description}" if job_description else ""

        prompt = f"""
    üéØ ZADANIE: Wygeneruj personalizowane pytania na rozmowƒô kwalifikacyjnƒÖ w jƒôzyku polskim

    üìã DANE WEJ≈öCIOWE:
    ‚Ä¢ Stanowisko: {job_title}
    ‚Ä¢ CV kandydata: {cv_text[:3000]}...{job_desc_info}

    ‚úÖ WYMAGANIA PYTA≈É:
    1. 10-15 pyta≈Ñ dostosowanych do profilu kandydata
    2. Pytania powinny byƒá r√≥≈ºnorodne: techniczne, behawioralne, sytuacyjne
    3. Uwzglƒôdnij do≈õwiadczenie i umiejƒôtno≈õci z CV
    4. Dodaj pytania specyficzne dla bran≈ºy i stanowiska
    5. Uwzglƒôdnij poziom do≈õwiadczenia kandydata

    üìù KATEGORIE PYTA≈É:
    1. **Pytania podstawowe** - o do≈õwiadczeniu i motywacji
    2. **Pytania techniczne** - o konkretne umiejƒôtno≈õci z CV
    3. **Pytania behawioralne** - o sytuacje i zachowania
    4. **Pytania sytuacyjne** - scenariusze problemowe
    5. **Pytania o firmƒô** - zainteresowanie pozycjƒÖ i firmƒÖ

    üé§ FORMAT ODPOWIEDZI:
    PYTANIA PODSTAWOWE:
    1. [pytanie]
    2. [pytanie]

    PYTANIA TECHNICZNE:
    1. [pytanie]
    2. [pytanie]

    PYTANIA BEHAWIORALNE:
    1. [pytanie]
    2. [pytanie]

    PYTANIA SYTUACYJNE:
    1. [pytanie]
    2. [pytanie]

    PYTANIA O FIRMƒò I STANOWISKO:
    1. [pytanie]
    2. [pytanie]

    üöÄ WSKAZ√ìWKI:
    ‚Ä¢ Ka≈ºde pytanie powinno byƒá konkretne i merytoryczne
    ‚Ä¢ Uwzglƒôdnij s≈Çowa kluczowe z opisu stanowiska
    ‚Ä¢ Dostosuj poziom trudno≈õci do do≈õwiadczenia kandydata
    ‚Ä¢ Dodaj pytania sprawdzajƒÖce soft skills

    Wygeneruj teraz personalizowane pytania na rozmowƒô kwalifikacyjnƒÖ:
            """

        logger.info(
            f"ü§î Generowanie pyta≈Ñ na rozmowƒô dla stanowiska: {job_title}")

        questions = make_openrouter_request(prompt, model=selected_model, is_premium=is_premium)

        if questions:
            logger.info(
                f"‚úÖ Pytania na rozmowƒô wygenerowane pomy≈õlnie (d≈Çugo≈õƒá: {len(questions)} znak√≥w)"
            )

            return {
                'success': True,
                'questions': questions,
                'job_title': job_title,
                'model_used': selected_model or DEFAULT_MODEL
            }
        else:
            logger.error("‚ùå Brak odpowiedzi z API lub nieprawid≈Çowa struktura")
            return None

    except Exception as e:
        logger.error(f"‚ùå B≈ÇƒÖd podczas generowania pyta≈Ñ na rozmowƒô: {str(e)}")
        return None


def analyze_skills_gap(cv_text,
                       job_title,
                       job_description="",
                       is_premium=False,
                       selected_model=None):
    """
    Analizuje luki kompetencyjne miƒôdzy CV a wymaganiami stanowiska
    """
    try:
        job_desc_info = f"\n\nOpis stanowiska:\n{job_description}" if job_description else ""

        prompt = f"""
    üéØ ZADANIE: Przeprowad≈∫ szczeg√≥≈ÇowƒÖ analizƒô luk kompetencyjnych w jƒôzyku polskim

    üìã DANE WEJ≈öCIOWE:
    ‚Ä¢ Stanowisko: {job_title}
    ‚Ä¢ CV kandydata: {cv_text[:3000]}...{job_desc_info}

    ‚úÖ CELE ANALIZY:
    1. Por√≥wnaj umiejƒôtno≈õci z CV z wymaganiami stanowiska
    2. Zidentyfikuj mocne strony kandydata
    3. Wykryj luki kompetencyjne i brakujƒÖce umiejƒôtno≈õci
    4. Zasugeruj sposoby rozwoju i uzupe≈Çnienia brak√≥w
    5. Oce≈Ñ og√≥lne dopasowanie do stanowiska (0-100%)

    üìä FORMAT ODPOWIEDZI:

    OCENA OG√ìLNA: [XX]% dopasowania do stanowiska

    MOCNE STRONY KANDYDATA:
    ‚úÖ [umiejƒôtno≈õƒá 1] - [kr√≥tkie uzasadnienie]
    ‚úÖ [umiejƒôtno≈õƒá 2] - [kr√≥tkie uzasadnienie]
    ‚úÖ [umiejƒôtno≈õƒá 3] - [kr√≥tkie uzasadnienie]

    LUKI KOMPETENCYJNE:
    ‚ùå [brakujƒÖca umiejƒôtno≈õƒá 1] - [dlaczego jest potrzebna]
    ‚ùå [brakujƒÖca umiejƒôtno≈õƒá 2] - [dlaczego jest potrzebna]
    ‚ùå [brakujƒÖca umiejƒôtno≈õƒá 3] - [dlaczego jest potrzebna]

    REKOMENDACJE ROZWOJU:
    üéì [konkretna rekomendacja 1] - [kurs/certyfikat/do≈õwiadczenie]
    üéì [konkretna rekomendacja 2] - [kurs/certyfikat/do≈õwiadczenie]
    üéì [konkretna rekomendacja 3] - [kurs/certyfikat/do≈õwiadczenie]

    PRIORYTET ROZWOJU:
    üî• WYSOKI PRIORYTET: [umiejƒôtno≈õci kluczowe dla stanowiska]
    üî∏ ≈öREDNI PRIORYTET: [umiejƒôtno≈õci przydatne]
    üîπ NISKI PRIORYTET: [umiejƒôtno≈õci dodatkowe]

    PLAN DZIA≈ÅANIA (3-6 miesiƒôcy):
    1. [konkretny krok do podjƒôcia]
    2. [konkretny krok do podjƒôcia]
    3. [konkretny krok do podjƒôcia]

    üöÄ WSKAZ√ìWKI:
    ‚Ä¢ Skup siƒô na umiejƒôtno≈õciach technicznych i soft skills
    ‚Ä¢ Uwzglƒôdnij trendy w bran≈ºy
    ‚Ä¢ Zasugeruj konkretne zasoby edukacyjne
    ‚Ä¢ Oce≈Ñ realno≈õƒá pozyskania brakujƒÖcych kompetencji

    Przeprowad≈∫ teraz szczeg√≥≈ÇowƒÖ analizƒô luk kompetencyjnych:
            """

        logger.info(
            f"üîç Analiza luk kompetencyjnych dla stanowiska: {job_title}")

        analysis = make_openrouter_request(prompt, model=selected_model, is_premium=is_premium)

        if analysis:
            logger.info(
                f"‚úÖ Analiza luk kompetencyjnych uko≈Ñczona pomy≈õlnie (d≈Çugo≈õƒá: {len(analysis)} znak√≥w)"
            )

            return {
                'success': True,
                'analysis': analysis,
                'job_title': job_title,
                'model_used': selected_model or DEFAULT_MODEL
            }
        else:
            logger.error("‚ùå Brak odpowiedzi z API lub nieprawid≈Çowa struktura")
            return None

    except Exception as e:
        logger.error(f"‚ùå B≈ÇƒÖd podczas analizy luk kompetencyjnych: {str(e)}")
        return None